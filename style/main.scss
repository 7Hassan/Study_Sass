//! Importing
@use './pages/pages'; //import _pages.scss file
@use './helpers/colors'; //import variables
@use './helpers/mixin' as *; //import mixin and use it without mixin.nameMixin
@use './helpers/functions';
//! Variable
$mainColor: green; //global global 
.class{
  $classColor:red !global; //local variable and make it global
  color: $mainColor; //get variable
  color: colors.$mainIdColor; //get variable from colors file
}
$max_mobile:'max-width:500px';
@media ($max_mobile) {
  .class{
    color: red;
  }
}

//! for Loops
@for $i from 1 through 3{ //loop : 1,2,3
  .class{
    font-size: $i+1px;
  } 
}
@for $i from 1 to 2{ //loop : 1,2
  .class{
    font-size: $i+1px;
  } 
}

//! while loop
$start:0;
@while $start <= 10{
  .class{
    font-size: $start+1px;
  } 
  $start:$start+1;
}
//! Each & map
$colors:red,green,blue;
@each $color in $colors{
  .#{$color}-class{
    color: $color;
  }
}
$colors:('facebook':red,'inst':green);
@each $name,$color in $colors{
  .#{$name}-class{
    color: $color;
  }
}
$classes: 'one' 13px red,'tow' 12px green;
@each $name,$font,$color in $classes{
  .#{$name}-class{
    color: $color;
    font-size: $font;
  }
}
//! Parent & nested child
.parent{
  font-size: 10px;
  .child{
    font-size: 8px;
    .grand-child{
      font-size: 5px;
    }
  }
}

//! Grouping
.parent-one,
.parent-two{
  font-size: 10px;
  .child{
    font-size: 7px;
  }
}

//! Direct child (.parent > .child{}) in css
.parent > {
  .child{
    font-size: 10px;
  }
}
.parent {
  > .child{ //only direct child
    font-size: 10px;
  }
  .test{ // all test in parent
    font-size: 18px;
  }
  + p{ //next element 
    font-size: 90px;
  }
}
.parent{
  >{
    .child{
      font-size: 10px;
    }
    .child-2{
      font-size: 10px;
    }
  }
  +{
    p{
      font-size: 10px;
    }
    h1{
      font-size: 10px;
    }
  }
}
.parent {
  .child{
    font-size: 10px;
  }
  &.clicked{ //(.parent.clicked{}) in css
    font-size: 6px;
  }
  &:hover { 
    font-size: 6px;
  }
  &:not(&){ //(.parent:not(.parent) {}) in css
    font-size: 10px;
  }
  [dir='rtl'] &{ //([dir=rtl] .parent {}) in css
    direction: rtl;
  }
  &::before{
    color: red;
  }
}

//! Place holders
.box-container{
  font-size: 10px;
  color: red;
  background-color: #000;
}
%place-holder{
  font-size: 10px;
  color: red;
  background-color: #000;
}
.box{
  @extend .box-container; //take the same properties of box-container
  @extend %place-holder; //take the same properties from place holder 
  color: white;
}

//! if & else
.page{
  $theme:'light';
  @if $theme == 'light'{background-color: white;}
  @else{background-color: black;}
  color: if($theme == 'light',white,black); 
}

//! interpolation
$class_name: 'pages'; 
.class-#{$class_name}{
  color: white;
  .class-#{unique-id()}{ //this function make unique name
    color: white;
  }
}

//! comments
// show in scss not css
/* show in scss and css not compressed mode */
/*! show in scss and css and compressed mode */
/* dynamic comment variable => #{$class_name}*/


ul li{
  @include ls-reset;
  @include circle(100px);
}

//! Functions
@function half($size){
  @return $size/2;
} 
@function sizes($sizes...){
  $total:0;
  @each $size in $sizes{
    $total:$total+$size;
  }
  @return $total;
}
.function{
  width: half(20);
  height: sizes(10,10,10);
}
.class{
  color: functions.Animation('go');
}